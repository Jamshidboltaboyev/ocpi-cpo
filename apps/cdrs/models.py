from django.core.validators import MaxLengthValidator
from django.db import models
from apps.core.models import TimeStampedModel
from apps.core.utils import price_default_value
from apps.locations.models import Connector
from apps.tariffs.models import Tariff


class ChargingPeriod(models.Model):
    start_date_time = models.DateTimeField()
    tariff_id = models.CharField(max_length=36, null=True, blank=True)


class SignedData(TimeStampedModel):
    encoding_method = models.CharField(max_length=36)
    encoding_method_version = models.IntegerField(null=True, blank=True)
    public_key = models.TextField(null=True, blank=True, validators=[MaxLengthValidator(512)])

    url = models.TextField(null=True, blank=True, validators=[MaxLengthValidator(512)])

    def __str__(self):
        return self.encoding_method


class CdrToken(models.Model):
    class TokenType(models.TextChoices):
        AD_HOC_USER = 'AD_HOC_USER'  # 'One time use Token ID generated by a server (or App)'
        APP_USER = 'APP_USER'  # 'Token ID generated by a server (or App) to identify a user of an App'
        OTHER = 'OTHER'  # 'Other type of token'
        RFID = 'RFID'  # 'RFID Token'

    country_code = models.CharField(max_length=2)
    party_id = models.CharField(max_length=3)
    uid = models.CharField(max_length=36)
    type = models.CharField(max_length=50, choices=TokenType.choices)
    contract_id = models.CharField(max_length=36)

    def __str__(self):
        return f"{self.uid} - {self.type}"


class CdrDimension(models.Model):
    class CdrDimensionType(models.TextChoices):
        CURRENT = 'CURRENT'  # 'Average charging current'
        ENERGY = 'ENERGY'  # 'Total amount of energy charged or discharged'
        ENERGY_EXPORT = 'ENERGY_EXPORT'  # 'Total amount of energy feed back into the grid'
        ENERGY_IMPORT = 'ENERGY_IMPORT'  # 'Total amount of energy charged'
        MAX_CURRENT = 'MAX_CURRENT'  # 'Sum of the maximum current over all phases'
        MIN_CURRENT = 'MIN_CURRENT'  # 'Sum of the minimum current over all phases'
        MAX_POWER = 'MAX_POWER'  # 'Maximum power reached'
        MIN_POWER = 'MIN_POWER'  # 'Minimum power reached'
        PARKING_TIME = 'PARKING_TIME'  # 'Time not charging'
        POWER = 'POWER'  # 'Average power'
        RESERVATION_TIME = 'RESERVATION_TIME'  # 'Time Charge Point has been reserved'
        STATE_OF_CHARGE = 'STATE_OF_CHARGE'  # 'Current state of charge of the EV'
        TIME = 'TIME'  # 'Time charging'

    charging_period = models.ForeignKey(ChargingPeriod, on_delete=models.CASCADE, related_name='dimensions')
    type = models.CharField(max_length=20, choices=CdrDimensionType.choices)
    volume = models.FloatField()

    def __str__(self):
        return f"{self.type} - {self.volume}"


class SignedValue(TimeStampedModel):
    nature = models.CharField(max_length=32)
    plain_data = models.TextField(max_length=512)
    signed_data = models.TextField(max_length=5000)
    signed_value = models.ForeignKey(SignedData, on_delete=models.CASCADE)

    def __str__(self):
        return self.nature


class CdrLocation(models.Model):
    name = models.CharField(max_length=255, null=True, blank=True)
    address = models.CharField(max_length=45)
    city = models.CharField(max_length=45)
    postal_code = models.CharField(max_length=10, null=True, blank=True)
    state = models.CharField(max_length=20, null=True, blank=True)
    country = models.CharField(max_length=3)
    coordinates = models.JSONField()
    evse_id = models.CharField(max_length=48)
    connector_id = models.CharField(max_length=36)
    connector_standard = models.CharField(max_length=50, choices=Connector.ConnectorType.choices)
    connector_format = models.CharField(max_length=50, choices=Connector.ConnectorFormat.choices)
    connector_power_type = models.CharField(max_length=50, choices=Connector.PowerType.choices)

    def __str__(self):
        return self.name if self.name else self.address


class Cdr(models.Model):
    country_code = models.CharField(max_length=2)
    party_id = models.CharField(max_length=3)
    start_date_time = models.DateTimeField()
    end_date_time = models.DateTimeField()
    session_id = models.CharField(max_length=36, null=True, blank=True)
    cdr_token = models.ForeignKey(CdrToken, on_delete=models.CASCADE)
    auth_method = models.CharField(max_length=20)  # Assuming AuthMethod is defined elsewhere
    authorization_reference = models.CharField(max_length=36, null=True, blank=True)
    cdr_location = models.ForeignKey(CdrLocation, on_delete=models.CASCADE)  # Assuming CdrLocation is defined elsewhere
    meter_id = models.CharField(max_length=255, null=True, blank=True)
    currency = models.CharField(max_length=3)
    tariffs = models.ManyToManyField(to=Tariff, blank=True)
    signed_data = models.ForeignKey(SignedData, on_delete=models.CASCADE, null=True, blank=True)
    total_cost = models.JSONField(default=price_default_value)
    total_fixed_cost = models.JSONField(default=price_default_value)
    total_energy = models.FloatField()
    total_energy_cost = models.JSONField(default=price_default_value)
    total_time = models.FloatField()
    total_time_cost = models.JSONField(default=price_default_value)
    total_parking_time = models.FloatField(null=True, blank=True)
    total_parking_cost = models.JSONField(default=price_default_value)
    total_reservation_cost = models.JSONField(default=price_default_value)
    remark = models.CharField(max_length=255, null=True, blank=True)
    invoice_reference_id = models.CharField(max_length=39, null=True, blank=True)
    credit = models.BooleanField(null=True, blank=True)
    credit_reference_id = models.CharField(max_length=39, null=True, blank=True)
    home_charging_compensation = models.BooleanField(null=True, blank=True)
    last_updated = models.DateTimeField()
