# Generated by Django 4.2 on 2024-03-01 11:14

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthorizationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('timestamp', models.DateTimeField(verbose_name='Время')),
            ],
            options={
                'verbose_name': 'Запрос на авторизация',
                'verbose_name_plural': 'Запросы на авторизация',
            },
        ),
        migrations.CreateModel(
            name='ChargePoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('identity', models.CharField(max_length=50, verbose_name='Identity')),
                ('boot_timestamp', models.DateTimeField(blank=True, null=True, verbose_name='Boot timestamp')),
                ('model', models.CharField(blank=True, max_length=128, null=True, verbose_name='Charge point model')),
                ('vendor', models.CharField(blank=True, max_length=128, null=True, verbose_name='Charge point vendor')),
                ('serial_number', models.CharField(blank=True, max_length=25, null=True, verbose_name='Charge point serial number')),
                ('firmware', models.CharField(blank=True, max_length=50, null=True, verbose_name='Firmware Version')),
                ('last_heartbeat', models.DateTimeField(blank=True, null=True, verbose_name='Last Heartbeat')),
                ('is_connected', models.BooleanField(default=False, verbose_name='is Connected')),
                ('is_active', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('BLOCKED', 'Blocked'), ('CHARGING', 'Charging'), ('INOPERATIVE', 'Inoperativ'), ('OUTOFORDER', 'Outoforder'), ('PLANNED', 'Planned'), ('REMOVED', 'Removed'), ('RESERVED', 'Reserved'), ('UNKNOWN', 'Unknown')], max_length=50)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'ChargePoint',
                'verbose_name_plural': 'ChargePoints',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ChargePointError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('error_code', models.CharField(max_length=50, null=True, verbose_name='Код ошибки')),
                ('info', models.CharField(max_length=50, null=True, verbose_name='Info')),
                ('status', models.CharField(max_length=50, null=True, verbose_name='Status')),
                ('timestamp', models.DateTimeField(verbose_name='Время')),
                ('vendor_id', models.CharField(max_length=255, null=True, verbose_name='Вендор')),
                ('vendor_error_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Код ошибки вендора')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChargePointTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('task_type', models.CharField(choices=[('ReserveNow', 'ReserveNow'), ('CancelReservation', 'CancelReservation'), ('ChangeAvailability', 'ChangeAvailability'), ('RemoteStartTransaction', 'RemoteStartTransaction'), ('RemoteStopTransaction', 'RemoteStopTransaction'), ('UnlockConnector', 'UnlockConnector')], max_length=32, verbose_name='Tip')),
                ('response_text', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Javob')),
                ('running', models.BooleanField(default=False, verbose_name='Olindi')),
                ('done', models.BooleanField(default=False, verbose_name='Tugadi')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Vaqt')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Connector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=40, null=True, verbose_name='Наименование')),
                ('connector_id', models.IntegerField(verbose_name='Connector Id within EVS')),
                ('standard', models.CharField(choices=[('CHADEMO', 'Chademo'), ('CHAOJI', 'Chaoji'), ('DOMESTIC_A', 'Domestic A'), ('DOMESTIC_B', 'Domestic B'), ('DOMESTIC_C', 'Domestic C'), ('DOMESTIC_D', 'Domestic D'), ('DOMESTIC_E', 'Domestic E'), ('DOMESTIC_F', 'Domestic F'), ('DOMESTIC_G', 'Domestic G'), ('DOMESTIC_H', 'Domestic H'), ('DOMESTIC_I', 'Domestic I'), ('DOMESTIC_J', 'Domestic J'), ('DOMESTIC_K', 'Domestic K'), ('DOMESTIC_L', 'Domestic L'), ('DOMESTIC_M', 'Domestic M'), ('DOMESTIC_N', 'Domestic N'), ('DOMESTIC_O', 'Domestic O'), ('GBT_AC', 'Gbt Ac'), ('GBT_DC', 'Gbt Dc'), ('IEC_60309_2_single_16', 'Iec 60309 2 Single 16'), ('IEC_60309_2_three_16', 'Iec 60309 2 Three 16'), ('IEC_60309_2_three_32', 'Iec 60309 2 Three 32'), ('IEC_60309_2_three_64', 'Iec 60309 2 Three 64'), ('IEC_62196_T1', 'Iec 62196 T1'), ('IEC_62196_T1_COMBO', 'Iec 62196 T1 Combo'), ('IEC_62196_T2', 'Iec 62196 T2'), ('IEC_62196_T2_COMBO', 'Iec 62196 T2 Combo'), ('IEC_62196_T3A', 'Iec 62196 T3A'), ('IEC_62196_T3C', 'Iec 62196 T3C'), ('NEMA_5_20', 'Nema 5 20'), ('NEMA_6_30', 'Nema 6 30'), ('NEMA_6_50', 'Nema 6 50'), ('NEMA_10_30', 'Nema 10 30'), ('NEMA_10_50', 'Nema 10 50'), ('NEMA_14_30', 'Nema 14 30'), ('NEMA_14_50', 'Nema 14 50'), ('PANTOGRAPH_BOTTOM_UP', 'Pantograph Bottom Up'), ('PANTOGRAPH_TOP_DOWN', 'Pantograph Top Down'), ('TESLA_R', 'Tesla R'), ('TESLA_S', 'Tesla S')], max_length=50, verbose_name="Connector's standard")),
                ('format', models.CharField(choices=[('SOCKET', 'Socket'), ('CABLE', 'Cable')], max_length=50, verbose_name="Connector's format")),
                ('power_type', models.CharField(choices=[('AC_1_PHASE', 'Ac 1 Phase'), ('AC_2_PHASE', 'Ac 2 Phase'), ('AC_2_PHASE_SPLIT', 'Ac 2 Phase Split'), ('AC_3_PHASE', 'Ac 3 Phase'), ('DC', 'Dc')], max_length=50, verbose_name="Connector's power type")),
                ('max_voltage', models.IntegerField(default=0, verbose_name="Connector's Max Voltage")),
                ('max_amperage', models.IntegerField(default=0, verbose_name="Connector's Max Amperage")),
                ('max_electric_power', models.IntegerField(default=0, verbose_name="Connector's Max electric power")),
                ('status', models.CharField(choices=[('Available', 'Available'), ('Preparing', 'Preparing'), ('Charging', 'Charging'), ('SuspendedEVSE', 'Suspended Evse'), ('SuspendedEV', 'Suspended Ev'), ('Finishing', 'Finishing'), ('Reserved', 'Reserved'), ('Unavailable', 'Unavailable'), ('Faulted', 'Faulted')], default='Unavailable', max_length=50, verbose_name='Статус')),
                ('price_for_charge', models.DecimalField(decimal_places=2, max_digits=10)),
                ('price_for_wait', models.DecimalField(decimal_places=2, max_digits=10)),
                ('price_for_parking', models.DecimalField(decimal_places=2, max_digits=10)),
                ('charge_point', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='charge_point.chargepoint')),
            ],
            options={
                'verbose_name': 'Коннектор',
                'verbose_name_plural': 'Коннекторы',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ConnectorType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('ico_code', models.CharField(max_length=10, verbose_name='ISO code')),
                ('name', models.CharField(max_length=30, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=25, verbose_name='Name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PublishTokenType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('uid', models.CharField(blank=True, max_length=36, null=True, verbose_name='Uid')),
                ('type', models.CharField(choices=[('ALWAYS', 'Always'), ('ALLOWED', 'Allowed'), ('ALLOWED_OFFLINE', 'Allowed Offline'), ('NEVER', 'Never')], max_length=50, verbose_name='White List Type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TokenGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('token', models.CharField(max_length=20, verbose_name='Token')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('token', models.CharField(max_length=20, verbose_name='Token')),
                ('token_group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tokens', to='charge_point.tokengroup')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='charge_point.country', verbose_name='Country')),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Region',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='PriceChargePointConnector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('price_type', models.IntegerField(choices=[(1, 'Sum/kWh'), (2, 'Sum/hour'), (2, 'Locking/min')], default=1, verbose_name='Тип')),
                ('price', models.CharField(max_length=20, verbose_name='Цена')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Время начало')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Время окончания')),
                ('connector', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='charge_point.connector', verbose_name='Коннектор')),
            ],
            options={
                'verbose_name': 'Цена коннектор',
                'verbose_name_plural': 'Цены коннектор',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('address', models.CharField(max_length=100, verbose_name='Address')),
                ('landmark', models.CharField(max_length=100, null=True, verbose_name='Landmark')),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Longitude')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Latitude')),
                ('parking_type', models.CharField(choices=[('UNDERGROUND_GARAGE', 'Underground Garage'), ('ON_STREET', 'On Street'), ('ON_DRIVEWAY', 'On Driveway'), ('PARKING_LOT', 'Parking Lot'), ('PARKING_GARAGE', 'Parking Garage'), ('ALONG_MOTORWAY', 'Along Motorway')], max_length=50, verbose_name='Parking Type')),
                ('publish', models.BooleanField(default=True, verbose_name='Allowed to all MSPs')),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='charge_point.district', verbose_name='District')),
                ('publish_allowed_to', models.ManyToManyField(blank=True, to='charge_point.publishtokentype', verbose_name='Allowed MSPs Tokens')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='InProgressTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('start_timestamp', models.DateTimeField(verbose_name='Время начала')),
                ('meter_start', models.IntegerField(verbose_name='Начало счетчика')),
                ('reservation_id', models.IntegerField(blank=True, null=True)),
                ('current', models.FloatField(default=0.0, verbose_name='Ток')),
                ('energy', models.FloatField(default=0.0, verbose_name='Энергия')),
                ('power', models.FloatField(default=0.0, verbose_name='Мощность')),
                ('soc', models.SmallIntegerField(default=0, verbose_name='Текущий %')),
                ('voltage', models.FloatField(default=0.0, verbose_name='Напряжения')),
                ('end', models.BooleanField(default=False, verbose_name='Закончен')),
                ('connector', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='in_progress_transactions', to='charge_point.connector', verbose_name='Коннектор')),
                ('start_token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='starting_transactions', to='charge_point.token')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='in_progress_transactions', to='accounts.user')),
            ],
            options={
                'verbose_name': 'Не законченная транзакция',
                'verbose_name_plural': 'Не законченные транзакции',
            },
        ),
        migrations.CreateModel(
            name='FavoriteChargePoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('charger_point', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_favorites', to='charge_point.chargepoint', verbose_name='Станция')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_favorites', to='accounts.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Избранные',
                'verbose_name_plural': 'Избранные',
            },
        ),
        migrations.CreateModel(
            name='FavoriteAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_favorites', to='charge_point.location', verbose_name='Адрес')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='user_favorites_address', to='accounts.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Избранные адреса',
                'verbose_name_plural': 'Избранные адреса',
            },
        ),
        migrations.AddField(
            model_name='district',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='charge_point.region', verbose_name='Region'),
        ),
        migrations.CreateModel(
            name='CommentsChargePoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('created_at', models.DateTimeField(editable=False, verbose_name='Время')),
                ('content', models.TextField(verbose_name='Текст')),
                ('deleted', models.BooleanField(default=False)),
                ('charger_point', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='charge_point.chargepoint', verbose_name='Станция')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.user', verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
            },
        ),
        migrations.CreateModel(
            name='ChargeTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('reservation_id', models.IntegerField(blank=True, null=True)),
                ('start_timestamp', models.DateTimeField(verbose_name='Время начала')),
                ('end_timestamp', models.DateTimeField(verbose_name='Время окончания')),
                ('duration', models.DurationField(verbose_name='Длительность')),
                ('meter_start', models.IntegerField(verbose_name='Начало счетчика')),
                ('meter_stop', models.IntegerField(verbose_name='Конец счетчика')),
                ('meter_used', models.IntegerField(verbose_name='Использовано')),
                ('stop_reason', models.TextField(blank=True, null=True, verbose_name='Причина остановки')),
                ('cost', models.BigIntegerField(default=0, verbose_name='Сумма')),
                ('sent', models.BooleanField(default=False, verbose_name='Отправлено')),
                ('connector', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='charge_point.connector', verbose_name='Коннектор')),
                ('end_token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='end_transactions', to='charge_point.token')),
                ('start_token', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='start_transactions', to='charge_point.token')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='charge_transactions', to='accounts.user')),
            ],
            options={
                'verbose_name': 'Транзакция зарядки',
                'verbose_name_plural': 'Транзакции зарядки',
            },
        ),
    ]
